{"pages":[],"posts":[{"title":"CF Worker自建Telegram\\_Bot反代","text":"1. 前言国内的网络环境是无法调用Telegram的API接口，所以使用CF Worker自建反代进行调用。 申请tg_bot并获取token。 查询自己的user_id。 2. 申请botTG bot申请只需打开BotFather的对话框使用/newbot指令就可以创建。完成创建后，同样也是可以在对话框中获取token。3. 反代脚本先在CF Worker中创建一个worker，并将其进行命名，将一下 脚本文件复制到其中。123456789101112131415161718192021222324252627282930const whitelist = [&quot;/bot888518123:&quot;];const tg_host = &quot;api.telegram.org&quot;;addEventListener('fetch', event =&gt; { event.respondWith(handleRequest(event.request))})function validate(path) { for (var i = 0; i &lt; whitelist.length; i++) { if (path.startsWith(whitelist[i])) return true; } return false;}async function handleRequest(request) { var u = new URL(request.url); u.host = tg_host; if (!validate(u.pathname)) return new Response('Unauthorized', { status: 403 }); var req = new Request(u, { method: request.method, headers: request.headers, body: request.body }); const result = await fetch(req); return result;} 其中，需要修改的是/bot后的数字，改成所申请到的token到数字。4. 测试在浏览器中输入：1https://xxx.xxx.xxx.dev/bot&lt;token&gt;/sendMessage?chat_id=ID&amp;text=123 其中，xxx.xxx.xxx为CF Worker的项目名称，如我所创建的：1telegram_proxy.alrencheng729.workers.dev &lt;token&gt;为申请bot得到的数据。ID可通过@userinfbot获取。","link":"/2021/07/18/CF%20Worker%E8%87%AA%E5%BB%BATelegram_Bot%E5%8F%8D%E4%BB%A3/"},{"title":"记录青龙安装与JDC","text":"1. 前言 本文主要用于记录青龙面板与JDC的搭建过程； 记录常用仓库； 本文所用的青龙版本号为2.8.0配合使用的JDC版本为1.0.5。 2 . 青龙面板的搭建2.1 创建容器我是用的是腾讯云的轻量级服务器搭建，首先是拉取镜像文件并创建容器。 1234567891011121314docker run -dit \\ -v /root/docker/qinglong/config:/ql/config \\ -v /root/docker/qinglong/log:/ql/log \\ -v /root/docker/qinglong/db:/ql/db \\ -v /root/docker/qinglong/scripts:/ql/scripts \\ -v /rootdocker/qinglong/jbot:/ql/jbot \\ -v /root/docker/qinglong/repo:/ql/repo \\ -p 5700:5700 \\ -e ENABLE_HANGUP=true \\ -e ENABLE_WEB_PANEL=true \\ --name qinglong \\ --hostname qinglong \\ --restart always \\ whyour/qinglong:latest 在这里，将容器的config 、log、 db、 scripts、 jbot、 repo文件夹映射到物理机的docker/qinglong 文件夹中。并且将青龙面板的访问映射到物理机的5700端口，我们通过http://ip:5700端口就可以访问我们搭建青龙面板了。 2.2 拉取常用库12345678910111213141516171819202122232425262728293031323334353637龙珠仓库 ql repo https://github.com/longzhuzhu/nianyu.git &quot;qx&quot; “main” 1 1-23/4 * * *moposmall仓库 ql repo https://github.com/moposmall/Script.git &quot;jx_mc|cfd.js&quot; 2 1-23/4 * * *混沌仓库 ql repo https://github.com/whyour/hundun.git &quot;quanx&quot; &quot;tokens|caiyun|didi|donate|fold|Env|.py&quot; 3 1-23/4 * * *柠檬（胖虎）仓库 ql repo https://github.com/panghu999/panghu.git &quot;jd_&quot; 4 1-23/4 * * *Ariszy（Zhiyi-N）仓库 ql repo https://github.com/Ariszy/Private-Script.git &quot;JD&quot; 5 1-23/4 * * *jiulan仓库 ql repo https://github.com/jiulan/platypus.git &quot;jd_|jx_&quot; 6 1-23/4 * * *JDHelloWorld仓库 ql repo https://github.com/JDHelloWorld/jd_scripts.git &quot;jd_|jx_|getJDCookie&quot; &quot;activity|backUp|Coupon|enen|update&quot; &quot;^jd[^_]|USER&quot; 7 1-23/4 * * *passerby-b仓库 ql repo https://github.com/passerby-b/JDDJ.git &quot;jddj_&quot; &quot;scf_test_event|jddj_fruit_code.js|jddj_getck.js|jd_|jddj_cookie&quot; 8 1-23/4 * * *zcy01仓库 ql repo https://github.com/ZCY01/daily_scripts.git &quot;jd_&quot; 9 1-23/4 * * *shufflewzc仓库 ql repo https://github.com/shufflewzc/faker2.git &quot;jd_|jx_|getJDCookie&quot; &quot;activity|backUp|Coupon|update&quot; &quot;^jd[^_]|USER|MovementFaker|JDJRValidator|ZooFaker|validate|fakersign&quot; 10 1-23/4 * * *he1pu仓库 ql repo https://github.com/he1pu/JDHelp.git &quot;jd_|jx_|getJDCookie&quot; &quot;activity|backUp|Coupon|update&quot; &quot;^jd[^_]|USER|^MovementFaker|^JDJRValidator|^sign|^ZooFaker&quot; &quot;^jd[^_]|USER&quot; 11 1-23/4 * * *柠檬（胖虎）代维护lxk0301仓库 ql repo https://github.com/panghu999/jd_scripts.git &quot;jd_|jx_|getJDCookie&quot; &quot;activity|backUp|Coupon|format_&quot; &quot;^jd[^_]|USER&quot; 12 1-23/4 * * *curtinlv仓库 ql repo https://github.com/curtinlv/JD-Script.git &quot;jd_&quot; 13 1-23/4 * * *cdle仓库 ql repo https://github.com/cdle/jd_study.git &quot;jd_&quot; 14 1-23/4 * * *smiek2221仓库 ql repo https://github.com/smiek2221/scripts.git &quot;jd_&quot; &quot;&quot; &quot;^MovementFaker|^JDJRValidator|^sign&quot; 15 1-23/4 * * *chiupam仓库(京喜工厂瓜分电力开团ID) ql repo https://github.com/chiupam/JD_Diy.git &quot;activeId&quot; 16 1-23/4 * * *star261仓库 ql repo https://github.com/star261/jd.git &quot;jd_|star&quot; &quot;&quot; &quot;MovementFaker&quot; 17 1-23/4 * * *温某人仓库 ql repo https://github.com/Wenmoux/scripts.git &quot;other|jd&quot; &quot;&quot; &quot;&quot; &quot;wen&quot; 18 1-23/4 * * *Aaron-lv仓库 ql repo https://github.com/Aaron-lv/sync.git &quot;jd_|jx_|getJDCookie&quot; &quot;activity|backUp|Coupon&quot; &quot;^jd[^_]|USER|utils&quot; &quot;jd_scripts&quot; 19 1-23/4 * * * 其他青龙相关仓库 3. JDC3.1 为什么要使用JDC？使用JDC可以通过京东APP扫码自动获取Cookie，并且可以通过外网进行Coookie的写入。 3.2 JDC搭建首先需要下载所需文件，作者在GIthub的仓库为 :https://github.com/dadaxiaoxiaod/JDC创建一个文件夹用于存放所需文件 mkdir JDC将下载好的文件按照需要传入文件夹当中。 123sudo -i （获取root权限)cd JDCchmod 777 JDC 下一步对配置文件进行求改。 123456789101112131415161718192021222324252627282930313233343536#公告设置[app] explain = &quot;本站相关工具及技术仅供个人学习、研究使用。不得用于商业用途，否则后果自负!&quot; #页面使用说明显示 path = &quot;/root/docker/qinglong&quot; #QL文件路径设置，一般无需更改 notice = &quot;请使用京东APP扫描二维码登录&quot; QLip = &quot;http://127.0.0.1&quot; #青龙面板的ip，部署于一台服务器时不用更改 QLport = &quot;5700&quot; #青龙面板的端口，默认为5700 logName = &quot;chinnkarahoi_jd_scripts_jd_bean_change&quot; #日志脚本名称 pushQr = &quot;&quot; #消息推送二维码链接 allowAdd = &quot;0&quot; #是否允许添加账号（0允许1不允许）不允许添加时则只允许已有账号登录 allowNum = 50 dumpRouterMap = true#web服务设置[server] address = &quot;:5701&quot; #端口号设置 serverRoot = &quot;public&quot; #静态目录设置，请勿更改 serverAgent = &quot;JDCookie&quot; #服务端UA#模板设置[viewer]Delimiters = [&quot;${&quot;, &quot;}&quot;] #模板标签，请勿更改#cli工具设置[gfcli] [gfcli.build] name = &quot;JDC&quot; arch = &quot;amd64&quot; system = &quot;linux&quot; mod = &quot;none&quot; cgo = 0 pack = &quot;public,template&quot; version = &quot;v1.0.5&quot; output = &quot;./bin&quot; extra = &quot;&quot; 最后将其添加进后台任务。 1nohup ./JDC 3.3 打开JDC扫码登入配置文件中默认端口为5701，打开http://ip:5701就可以访问。","link":"/2021/07/17/%E9%9D%92%E9%BE%99%E5%AE%89%E8%A3%85%E4%B8%8EJDC/"},{"title":"博客搭建配置","text":"1. 前言 本文是对本博客的一些配置进行修改； 主要内容在于添加了Live2D看板娘、blog-encrypt加密以及画廊。 2. Live2D看板娘本人是个潜在的二次元，对于看板娘这样的事物，肯定是不能选择放弃。Live2D是一种应用于电子游戏的绘图渲染技术，由日本Cybernoids公司开发，通过一系列的连续图像和人物建模来生成一种类似二维图像的三维模型，换句话说就是2D的素材实现一定程度的3D效果，但只能是一定程度3D，因为Live 2D人物无法大幅度转身。图为本博客所使用的看板娘。 2.1 安装依赖在博客文件夹的根目录，使用指令安装依赖。npm install --save hexo-helper-live2d 如果成功安装的话会在根目录的node_modules出现live2d-widge文件夹。一般情况下，安装失败。可以根据所提示的命令进行安装。 2.2 下载model文件例如本博客使用的model文件为shizuku，那么就使用指令。npm install live2d-widget-model-shizuku 当然model文件不止一个，可以进行挑选。 Epsilon2.1 haru z16 hibiki Mike ni-j nico shizuku下载成功后，可以在根木里node_modules里面看见live2d-widget-model-shizuku文件夹。2.3 配置_config.yml文件在_config.yml文件中加入12345678910111213141516## Live2D看板娘live2d: enable: true pluginModelPath: assets/ model: #模板目录，在node_modules里 use: live2d-widget-model-shizuku display: position: right width: 300 height: 600 mobile: # 在手机端显示 show: false rect: opacity:0.7 即可完成配置。3. blog-encrypt使用blog-encrypt可以对博客进行加密，使得不被别人翻看。3.1 安装依赖使用命令安装blog-encrypt。npm install --save hexo-blog-encrypt ### 3.2 使用在需要加密的博文中加入密码。12345---title: Hello Worlddate: 2016-03-30 21:18:02password: hello--- 对Tags进行加密，打开_config.yml，配置信息。123456789# Securityencrypt: # hexo-blog-encrypt abstract: 有东西被加密了, 请输入密码查看. message: 您好, 这里需要密码. tags: - {name: tagName, password: 密码A} - {name: tagName, password: 密码B} wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试. wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容. 其中tags为需要加密的标签。加密的优先度前者大于后者。4. 画廊Icarus的画廊插件同时包含了lightGallery与Justified Gallery两种插件。 若要启用画廊插件，请将主题配置中plugins &gt; gallery的值设置为true。12plugins: gallery: true 此外，若要使用Justified Gallery，请将你的图片包裹在&lt;div class=&quot;justified-gallery&quot;&gt;与&lt;/div&gt;的HTML标签对中。 并且如果你使用的是Markdown语法来引用图片的话，请在HTML标签和Markdown之间添加空行。 例如，下方画廊预览的Markdown代码为：123456789&lt;div class=&quot;justified-gallery&quot;&gt;![Dog](https://raw.githubusercontent.com/Alrencheng/Figurebed/master/img/dog.jpg)![Horse](https://raw.githubusercontent.com/Alrencheng/Figurebed/master/img/horse.jpg)![Flower](https://raw.githubusercontent.com/Alrencheng/Figurebed/master/img/flower.jpg)![People](https://raw.githubusercontent.com/Alrencheng/Figurebed/master/img/people.jpg)![Food](https://raw.githubusercontent.com/Alrencheng/Figurebed/master/img/food.jpg)&lt;/div&gt; 同样，我们也可使用纯HTML来创建Justified Gallery。 这种情况下HTML标签之间就不需要添加空行了：1234567&lt;div class=&quot;justified-gallery&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Alrencheng/Figurebed/master/img/dog.jpg&quot; alt=&quot;Dog&quot; /&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Alrencheng/Figurebed/master/img/horse.jpg&quot; alt=&quot;Horse&quot; /&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Alrencheng/Figurebed/master/img/flower.jpg&quot; alt=&quot;Flower&quot; /&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Alrencheng/Figurebed/master/img/people.jpg&quot; alt=&quot;People&quot; /&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Alrencheng/Figurebed/master/img/food.jpg&quot; alt=&quot;Food&quot; /&gt;&lt;/div&gt;","link":"/2021/07/18/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%85%8D%E7%BD%AE/"},{"title":"带通滤波器对窄带调幅信号的响应","text":"1. 前言 本文是在专业课原题2011年第四大题第三小题所遇到； 在处理带通信号时可以将其等效通过等效的低通滤波器。 2. 窄带调幅信号载波信号不包含所要传送的信息，则在传送过程中，不需要在已调信号中包含载波信号的成分。只需要在接收端提供一个同频同相的本地再拨信号即可。调幅信号的调制与解调如图所示。 3.带通滤波器一个理想的滤波器应该有一个完全平坦的通带，例如在通带内没有增益或者衰减，并且在通带之外所有频率都被完全衰减掉，另外，通带外的转换在极小的频率范围完成。 4.等效思想图为一个低通信号经过变化SSB变化。再通过带通滤波器。我们可以反过来看，任何一个带通信号，都可以等效为一个低通信号，只需要将信号的频率向原点移动。所以，信号通过带通滤波器就可以等效为等效的基带信号通过相应的低通滤波器，然后频率上将信号再向远离远点的方向平移动。 5.例题在本题中，通过前面两个小题可以知道本题的系统时带通滤波器。在第三小问中，输入信号x(t)是一个直流分量与一个调幅信号的组合。利用前面等效，带通滤波器对窄带调幅信号的响应可以利用等效的低通滤波器对系带信号的处理结果。也就是求出低通滤波器在基带信号的频率点函数值。","link":"/2021/07/28/%E4%B8%93%E4%B8%9A%E8%AF%BE-%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"工具教程","slug":"工具教程","link":"/tags/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/"},{"name":"学习","slug":"学习","link":"/tags/%E5%AD%A6%E4%B9%A0/"}],"categories":[{"name":"工具教程","slug":"工具教程","link":"/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/"},{"name":"Telegram","slug":"工具教程/Telegram","link":"/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/Telegram/"},{"name":"京东","slug":"工具教程/京东","link":"/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/%E4%BA%AC%E4%B8%9C/"},{"name":"博客","slug":"工具教程/博客","link":"/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/%E5%8D%9A%E5%AE%A2/"},{"name":"考研","slug":"考研","link":"/categories/%E8%80%83%E7%A0%94/"},{"name":"专业课","slug":"考研/专业课","link":"/categories/%E8%80%83%E7%A0%94/%E4%B8%93%E4%B8%9A%E8%AF%BE/"}]}